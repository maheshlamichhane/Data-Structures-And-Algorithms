What is BIG O:->
-> Big O is the language and metric we use to describe the efficiency of algorightm.

Time Complexity:->
-> A way of showing how the runtime of a function increases as the size of input increases.

Big O Notations:->
i. Big O:-> It is a complexity that is going to be less or equal to the 
worst case.
ii. Big Omega:-> It is a complexity that is going to be at least more
than the beast case.
iii. Big Theta:-> It is a complexity that is within bounds of the worst and
the best cases.

Note:-> we have a array with data then we need to search elements from that
array then
[1,2,3,8,9]
Big O:-> O(N)
Big Omega:-> Omega(1)
Big Theta:-> Theta(n/2)

Runtime Complexities:->
Complexity 					Name					Sample
O(1)						Constant				Accessing a specific element in array
O(N)						Linear					Loop through array elements
O(LogN)						Logarithmic				Find an element in sorted array
O(N2)						Quadratic				Looking a every index in the array twice
O(2powN)					Exponential				Double recursion in Fibonacci

O(1):->
int[] array = {1,2,3,4,5}
array[0]
//it takes constant time to access first element


O(N):->
int[] custArray = {1,2,3,4,5};
for(int i = 0; i < custArray.length;i++){
System.out.println(custArray[i]);
}
//linear time since it is visiting every element of array

O(LogN):->
int[] custArray = {1,2,3,4,5};
for(int i = 0; i < custArray.length; i++){
System.out.println(custArray[i]);
}
//logarithmic time since it is visiting only some elements
//binary search is the example of logarithimic time complexity

O(N pow(2)) Quadratic Time:-> 
int[] array custArray = {1,2,3,4,5};
for(int i=0; i<custArray.length;i++){
for(int j=0; j<custArray.length;j++){
System.out.println(custArray[i]);
}}

O(2pow(N)) Exponential time:->
public int fibonacci(int n){
if(n==0 || n==1){
return n;
}
return fibonacci(n-1) + fibonacci(n-2);
}

Time Complexity Order from excellent to worst:->
O(logN),O(1) :-> Excellent
O(n) :-> Good
O(nlogN) :-> Fair
O(Npow(2)) :-> Horrible
O(2pow(n)) :-> Horrible
O(n!) :-> Horrible




Space Complexity:->
-> an array of size n
a = [a0,a1,a2,.....an]
O(n)
static int sum(int n){
if(n<=0){
return 0;
}
return n+sum(n-1);
}


-> an array of size n*n
a = [{a00,a01,a02},{a10,a11,a12}]
O(n square)

-> 
static int pairSumSequence(int n){
var sum = 0;
for(int i=0;i<=n;i++){
sum = sum + pairSum(i,i+1);
}
return sum;
}

static int pairSum(int a,int b){
return a+b;
}

space complexity: O(1)



Drop Constants and Non Dominant Terms:->
Drop Constant:
O(2N) -> O(N)

Drop Non Dominant Terms:->
O(N square + N) -> O(N square)
O(N+logN) -> O(N)

-> It is very possible that O(N) code is faster than O(1) code for specific
inputs.
-> Different computers with different architectures have different
constant factors.
Eg:Fast computer,fast memory access,lower constant. slow computer slow 
memory access higher constant.
-> Different algorithms with the same basic idea and computational complexity
might have slightly different constants.
Example: a*(b-c) VS a*b - a*c
-> As n -> infinity,constant factors are not really a big deal.



Add VS Multiply:->
for(int a=0;arrayA.length;a++){
System.out.println(arrayA[a]);
}
for(b=0;arrayB.length;b++){
System.out.println(arrayB[b]);
}
-> If your algorithm is in the form do this, then when you are all done do that then you 
add the runtimes.
O(A+B)

for(a=0;arrayA.length;a++){
for(b=0;arrayB.length;b++){
System.out.println(arrayB[b] + arrayA[a]);
}}
-> If your algorithm is in the form do this for each time you do that then
you multipley the runtimes.
O(A*B);

How to measure the codes using Big O?
No			Description																									Complexity
Rule1		Any assignment statement and if statements that are executed once regardless of the size of the problem.	O(1)
Rule2		A simple "for" loop from 0 to n(with no internal loops)														O(N)
Rule3		A nested loop of the same type takes quadratic time complexity												O(N square)
Rule4		A loop, in which the controlling parameter is divided by two at each step									O(logN)
Rule5		When dealing with multiple statements just add them up

Example:->
public static void findBiggestNumber([] sampleArray){
var biggestNumber = sampleArray[0]; ----------------> O(1)
for(index=1;sampleArray.length;index++){------------> O(N)
if(sampleArray[index] > biggestNumber){-------------> O(1)
biggestNumber = sampleArray[index];-----------------> O(1)
}
}
System.out.println(biggestNumber);------------------> O(1)
}
Time Complexity :-> O(1)+O(N)+O(1)= O(N)



How to measure recursive algorithm:->
Example:
public int findMaxNumRec(int[] sampleArray,int n){ ----------------------> M(n)
if(n==1){----------------> O(1)
return sampleArray[0]; ----------> O(1)
}
return max(sampleArray[n-1],findMaxNumrec(sampleArray,n-1));---------------M(n-1)
}

M(n) = O(1) + M(n-1)
M(1) = O(1)
M(n-1) = O(1) + M((n-1)-1)
M(n-2) = O(1) + M((n-2)-1)

now we can write 
M(n) = 1+M(n-1)
	 =1+ (1+M((n-1)-1))
	 =2+M(n-2)
	 =2+1+M((n-2)-1)
	 =3+M(n-3)
	 =a+M(n-a)
	 
	 =n-1+M(n-(n-1))
	 =n-1+1
	 =n
	 

How to measure Recursive Algorithm with multiple calls?
public int f(int n){
if(n<=1){
return 1;
}
return f(n-1) + f(n-2);
}

Time Complexity = O(branch pow(depth))
				= O(2pow(4) if n=4
				

Explanation:->
A=[11,4,12,7]; n=4
findMaxNumRec(A,4) -> max(A[4-1],12) -> max(7,12) = 12
findMaxNumRec(A,3) -> max(A[3-1],11) -> max(12,11) = 12
findMaxNumRec(A,2) -> max(A[2-1],11) -> max(4,11) = 11
findMaxNumRec(A,1) -> A[0] = 11


Cracking Interview Questions:->

Question1:->
-> Create a function which calculates the sum and product of elements of array
-> Find the time complexity for created method.
public void calculateSumAndProduct(int[] array) {
		int sum = 0;---------------------------->O(1)
		int product = 1;------------------------>O(1)
		for(int i=0; i<array.length;i++) {------>O(N)
			sum=sum+array[i];------------------->O(1)
		}
		for(int i=0;i<array.length;i++) {------->O(N)
			product = product*array[i];--------->O(1)
		}
		System.out.println("Sum="+sum+" and product="+product);---------O(1)
	}

Time complexity = O(N)+O(N)=2O(N)=O(N)

QuestionTwo:->
-> Create a function which prints to the console the pairs from given array.
-> Find the time complexity for created method.

public void printPair(int[] array) {
		for(int i=0; i<array.length;i++) {------------------>O(N)
			for(int j=0; j<array.length;j++) {-------------->O(N)
				System.out.println(array[i]+","+array[j]);-->O(1)
			}
		}
	}

Time complexity:-> O(N) * O(N) = O(N square)



QuestionThree:->
-> print unorder pair
public void printPair(int[] array) {
		for(int i=0; i<array.length;i++) {
			for(int j=i+1; j<array.length;j++) {
				System.out.println(array[i]+","+array[j]);
			}
		}
	}
	
Counting the iteration for second loop:->
1st ----> n-1
2nd ----> n-2
.
.
. 
1
=(n-1)+(n-2)+(n-3)+.....+2+1
=n(n-1)/2
=n square

Average Work:
Outer loop -> N times
inner loop?
1st ------> 10
2nd ------> 9
n*n/2
n square

QuestionFour:->
public void printPair(int[] array1,int[] array2) {
		for(int i=0; i<array1.length;i++) {
			for(int j=0; j<array2.length;j++) {
				if(array1[i]<array2[j]) {
					System.out.println(array1[i]+","+array2[j]);
				}
				
			}
		}
	}
	
Time complexity = O(ab) because length of the array is not same


QuestionFive:->
void printUnorderPairs(int[] arrayA,int[] arrayB){
for(int i=0;i<arrayA.length;i++){
for(int j=0;j<arrayB.length;j++){
for(int k=0;k<1000000;k++){
System.out.println(arrayA[i]+","+arrayB[j]);
}}}}

Time Complexity:-> O(ab)+O(1)=O(ab)


QuestionSix:->
-> Create a method which takes an array as a parameter and reverse it.
-> Find the runtime of the created method?

	public void reverseArray(int[] array) {
		for (int i = 0; i < array.length; i++) { ----------------> O(N/2)
			int other = array.length - i - 1;--------------------> O(1)
			int temp = array[i];---------------------------------> O(1)
			array[i] = array[other];-----------------------------> O(1)
			array[other] = temp;---------------------------------> O(1)
		}

	}

Time Complexity = O(N)

Interview Question 7:->
Which of the following are equivalent to O(N)? Why?
i. O(N+P) where p<N/2 -----> O(N)
ii. O(2N) -----------> O(N)
iii. O(N+logN) ------> O(N)
iv. O(N+NlogN) ------> O(NlogN)
v. O(N+M) -----> not equal to O(N)


QuestionEight:->
-> What is the runtime of the below code?
static int factorial(int n){
if(n<0){
return -1;
}
else if(n==0){
return 1;
}
else{
return n*factorial(n-1);
}}
Time Complexity:-> O(N)