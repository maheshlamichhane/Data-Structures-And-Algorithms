Arrays:->
-> Array can store data of specified type.
-> Elements of an array are located in a contiguous
-> Each element of an array has a unique index
-> The size of an array is predefined and cannot be modified.
-> In computer science,an array is a data structure consiting of a 
collection of elements,each identified by at least one array index or
key. An array is stored such that the position of each element can be
computed from its index by a mathematical formula.

Types Array:->
i. One Dimensional Array
-> an array with a bunch of values having been declared with a single index.

ii. Multi Dimensional Array
-> an array with a bunch of values having been declared with double index
is called two dimensional array.
-> an array with a bunch of values having been declared with triple index.
a[i][j][k] -> i,j and k between 0 and n


Arrays in Memory:->
-> Regardless of dimension arrays are always stored in the consecutive
memory locations.

Create an Array:->
-> When we create an array we
 * Declare: creates a reference to array
 * Instantiation of an array: creates an array
 * initialization: assigns values to cells in array
 
 datatype[] array;
 array = new dataType[];
 array[0] = 1
 
 Example:->
 int[] intArray; ------>O(1)
 intArray = new int[5]; -----> O(1)
 intArray[0] = 1;-------> O(1)
 intArray[1] = 2;-------> O(1)
 at last we can write O(N) because array element can be multiple.
 we can also write
 int[] intArray = new int[5] or int[] intArray = {1,2,3,4,5}; --> O(1)
 
 
 Array Traversal:->
 public void traverseArray(){
 	for(int i=0;i<array.length;i++){
 		System.out.println(array[i]);
 	}
 }
 Time complexity:-> O(N)
 Space complexity:-> O(1)
 
 
 Finding Array Element:->
 public void searchInArray(int valueToSearch){
 for(int i=0;i<array.length;i++){
  if(array[i].equals(valueToSearch)){
  	System.out.println("Value is found at the index of "+ i);
  	return;
  }
 }
 System.out.println(valueToSearch +" is not found");
 }
 }
 
 Time Complexity:-> O(N)
 Space Complexity = O(1)
 
 
 Delete Array Element:->
 public void deleteValue(int valueToDeleteIndex){
 try{
 arr[valueToDeleteIndex] = Integer.MIN_VALUE;
 System.out.println("The value has been deleted successfully");
 }
 catch(ArrayIndexOutOfBoundsException e){
 System.out.println("The value that is provided is not in the range of array");
 }
 }
 
 Time Complexity:-> O(1)
 Space Complexity:-> O(1)
 
 Time and Space complexity of 1D Arrays:->
 Operation								Time Complexity			Space Complexity
 Creating an empty array				O(1)					O(n)
 Inserting a value in an array			O(1)					O(1)
 Traversing a given array				O(n)					O(1)
 Accessing a given cell					O(1)					O(1)
 Searching a given value				O(n)					O(1)
 Deleting a given value					O(1)					O(1)
 
 
 Two Dimensional Array:->
 int[][] int2DArray;
 int2DArray = new int[2][2];
 int2DArray[0][0] = 0;
 int2DArray[0][1] = 1;
 int2DArray[1][0] = 2;
 int2DArray[1][1] = 3;
 Arrays.deepToString(int2DArray);
Output:-> 
[[0,1],[1,2]]

String 2DArray[][] = {{"a","b"},{"c","d"}};

Time Complexity:-> O1)
Space complexity:-> O(mn) where m = row count and n = column count

we can also instantiate two dimensional array like this:
public TwoDimensionalArray(int numberOfRows,int numberOfColumns){
this.arr = new int[numberOfRows][numberofColumns];
for(int row = 0; row < arr.length; row++){
for(int col=0; col<array[0].length;col++){
arr[row][col] = Integer.MIN_VALUE;
}
}
}

Insertion In Two Dimensional Array:->
public void insertValueInTheArray(int row,int column,int value){
try{
 if(arr[row][col] == Integer.MIN_VALUE){
 	arr[row][col] = value;
 	System.out.println("Value is set successfully");
 }
 else {
 	System.out.println("This cell is already occupied");
 }
}
catch(Exception e){
}
} 

Time Complexity:-> O(1)
Space Complexity:-> O(1)

Access an element of Two Dimensional Array:->
public void accessCell(int row,int column){
System.out.println("Accessing Row "+row+", Col "+col);
try{
	System.out.println("Cell value is "+arr[row][col]);
}
 catch(Exception e){
 }
 }
 
 Time Complexity: O(1)
 Space Complexity: O(1)
 
Traverse Two Dimensional Array:->
public void traverseTwoDimensionalArray(){
for(int = 0; i<array.length; i++){
for(int j=0; j<array.length; j++){
System.out.print("element with index "+i+" "+j+" is"+array[i][j]);
}
System.out.println();
}
}
 
Time Complexity: O(MN)
Space Complexity: O(1)

Searching Two Dimensional Array:-> 
public void searchElement(int value){
	for(int i=0; i<array.length; i++){
		for(int j=0; j<array.length; j++){
			if(array[i][j] == value){
			 System.out.println("Value Found");
			 return;
			}
		}
		System.out.println("Value not found");
	}
}
}
 
Time Complexity: O(mn)
Space Complexity: O(1)

Delete Array Element In 2D Array:->
public void deleteElement(int row,int col){
try{
System.out.println("Successffully deleted"+array[row][col]);
array[row][col] = Integer.MIN_VALUE;
}
catch(Exception e){
}
}

Time Complexity:-> O(1)
Space Complexity:-> O(1)



Time and Space Complexity of 2D Array:
Operation 								Time Complexity		Space Comple
Creating an empty array					O(1)				O(mn)
Inserting a value in an array			O(1)				O(1)
Traversing a given array 				O(mn)				O(1)
Accessing a given cell					O(1)				O(1)
Searching a given value 				O(mn)				O(1)
Deleting a given value 					O(1)				O(1)



When to use/avoid Arrays:->
When to use 
-> To store multiple variables of same data type
-> Random access

When to avoid
-> Same data type elements 
-> Reserve memory

 
 
 
 
 
 
 
 
 